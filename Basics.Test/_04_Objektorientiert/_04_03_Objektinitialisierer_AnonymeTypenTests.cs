using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Basics.Test._04_Objektorientiert
{
    class Filedesccriptor
    {
        public string filename {get; set;}
        public string filetype { get; set; }
        public long sizeInBytes {
            get
            {
                return _sizeInByte;
            }
            set
            {
                _sizeInByte = value;
            }
        }

        // Innerer Zustand, in dem die Werte der Eigenschaft sizeInBytes
        // gespeichert
        private long _sizeInByte = 0;
    }

    [TestClass]
    public class _04_03_Objektinitialisierer_AnonymeTypenTests
    {
        [TestMethod]
        public void TestMethod1()
        {
            // Neu: Objektinitialisierer anstelle Konstruktors
            Filedesccriptor fd2 = new Filedesccriptor
            {
                filename = "boot.ini",
                filetype = ".ini",
                sizeInBytes = 999
            };

            // Typinferenz
            int i = 99;

            // var wurde aus JavaScript entlehnt
            var j = 199;

            // Typinferenz bedeutet keine Aufweichung der strengen Typisierung
            //j = "299"; // Fehler. In JavaScript wäre es kein Fehler, da JavaScript nicht typisiert ist

            // Anonyme Typen
            var fdAnonym = new { filename = "boot.ini", filetype = ".ini", sizeInBytes = 999 };

            var fdAnonym2 = new { filename = "boot2.ini", filetype = ".ini", sizeInBytes = 1000, IsSysfile = true };

            // Die Eigenschaften eines anonymenn Typs sind nur lesbar
            //fdAnonym.filename = "hhh";
            Assert.AreEqual("boot.ini", fdAnonym.filename);

            // Auch für anonyme Typen gelten strenge Typisierung
            //fdAnonym.sizeInBytes = "Hallo Welt"; // Fehler            

        }
    }
}
